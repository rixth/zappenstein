/**
 * A generic data source to take advanatage of. It will take care of fetching
 * new data when there are no items left. It will also check with the specific
 * source whether or not an item is suitable for rendering.
 *
 * If it gets no data, it'll try again. Also, if it gets less than 5 results
 * and the URL is generated by a function (ie. cycling through different
 * methods) it'll try again.
 */
var DataSource = function (options) {
  var items = [],
      loadCallbacks = [];
  
  this.loadData = function (callback, isRetry) {
    if (!loadCallbacks.length || isRetry) {
      var urlIsFunction = typeof(options.url) === 'function';
      
      $.ajax(urlIsFunction ? options.url() : options.url, {
        dataType: 'jsonp'
      }).success($.proxy(function (data) {
        items = data[options.dataKey || 'results'];
        if (items && (!urlIsFunction || (urlIsFunction && items.length > 5))) {
          loadCallbacks.forEach(function (callback) {
            callback();
          })
          loadCallbacks = [];
        } else {
          setTimeout($.proxy(function () {
            this.loadData(callback, true);
          }, this), 1000);
        }
      }, this));
    }
    
    if (!isRetry) {
      loadCallbacks.push(callback);
    }
  }
  
  this.getItem = function (callback) {
    if (!items.length) {
      return this.loadData(function () {
        callWithItem(callback);
      });
    }
    callWithItem(callback);
  }
  
  function callWithItem(callback) {
    var item = items.pop();
    if (options.itemCanBeDisplayed) {
      while (item && !options.itemCanBeDisplayed(item)) {
        item = items.pop();
      }
    }
    
    if (item) {
      callback(item);
    }
  }
};